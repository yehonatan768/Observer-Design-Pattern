package observer;

import java.util.*;

/**
 The UndoableStringBuilder class is a utility that provides the same functionality as a StringBuilder,
 but with the added ability to undo previous operations.
 @author Noy Dayan, Yehonatan Mekayten
 @version 1
 */

public class UndoableStringBuilder {
	/**
	 * The string builder field stores the current state of the string.
	 */
	private Stack<String> st;
	private StringBuilder s;

	/**
	 * The getStringBuilder method returns the current string builder field.
	 *
	 * @return the string builder field
	 */
	public StringBuilder getStringBuilder() {
		return this.s;
	}

	/**
	 * The getStack method returns the current stack field.
	 *
	 * @return the stack field
	 */
	public Stack<String> getStack() {
		return this.st;
	}

	/**
	 * The UndoableStringBuilder constructor creates a new empty string builder and an empty stack.
	 */
	public UndoableStringBuilder()
	{
		this.st = new Stack<String>();
		this.s = new StringBuilder();
	}

	/**
	 * Copy Constructor
	 * @param s - new StringBuilder
	 * @param st - stack that contains all previous strings
	 * @exception IllegalArgumentException if invalid params - StringBuilder and/or Stack
	 */
	public UndoableStringBuilder(StringBuilder s, Stack<String> st)
	{
		try
		{
			this.s = s;
			this.st = st;
		}
		catch (Exception e)
		{
			System.out.println("[COPY-CONSTRUCTOR ERROR]: Please enter valid StringBuilder and Stack<String>");
		}
	}

	/**
	 * Appends the specified string to this character sequence
	 * @param str - the input string
	 * @return a new UndoableStringBuilder generated by the updated string and stack
	 * @exception IllegalArgumentException if invalid param - String
	 */
	public UndoableStringBuilder append(String str)
	{
		try
		{
			this.st.push(this.s.toString());
			this.s.append(str);
		}
		catch (Exception e)
		{
			System.out.println("[APPEND-FUNCTION ERROR]: Please enter valid String");
		}
		return new UndoableStringBuilder(this.s, this.st);
	}

	/**
	 * Removes the characters in a substring of this sequence.
	 * The substring begins at the specified start and extends to the character at index
	 * end - 1 or to the end of the sequence if no such character exists.
	 * If start is equal to end, no changes are made
	 * @param start - start position of deletion
	 * @param end - the end position of deletion
	 * @return a new UndoableStringBuilder generated by the updated string and stack
	 * @exception StringIndexOutOfBoundsException if string index out of bounds
	 */
	public UndoableStringBuilder delete(int start, int end)
	{
		try
		{
			this.st.push(this.s.toString());
			this.s.delete(start, end);
		}
		catch (Exception e)
		{
			System.out.println("[DELETE-FUNCTION ERROR]: Please enter 2 numbers between 0-"+this.s.length());

		}
		return new UndoableStringBuilder(this.s, this.st);
	}

	/**
	 * Inserts the string into this character sequence
	 * @param offset - offset position
	 * @param str - the input string
	 * @return a new UndoableStringBuilder generated by the updated string and stack
	 * @exception IllegalArgumentException if invalid params - Int and/or String
	 */
	public UndoableStringBuilder insert(int offset, String str)
	{
		try
		{
			this.st.push(this.s.toString());
			this.s.insert(offset, str);
		}
		catch (Exception e)
		{
			System.out.println("[INSERT-FUNCTION ERROR]: Please enter valid Offset and String");
		}
		return new UndoableStringBuilder(this.s, this.st);
	}

	/**
	 * Replaces the characters in a substring of this sequence with characters in
	 * the specified String. The substring begins at the specified start and
	 * extends to the character at index end - 1 or to the end of the sequence if
	 * no such character exists. First the characters in the substring are removed
	 * and then the specified String is inserted at start. (This sequence will be
	 * lengthened to accommodate the specified String if necessary)
	 * @param start - start position
	 * @param end - end position
	 * @param str - the input string
	 * @return a new UndoableStringBuilder generated by the updated string and stack
	 * @exception StringIndexOutOfBoundsException if string index out of bounds
	 */
	public UndoableStringBuilder replace(int start,int end, String str)
	{
		try
		{
			this.st.push(this.s.toString());
			this.s.replace(start, end, str);
		}
		catch (Exception e)
		{
			System.out.println("[REPLACE-FUNCTION ERROR]: Please enter 2 numbers between 0-" + this.s.length() + " and a valid String");
		}
		return new UndoableStringBuilder(this.s, this.st);
	}

	/**
	 * Causes this character sequence to be replaced by the reverse of the sequence
	 * @return a new UndoableStringBuilder generated by the updated string and stack
	 */
	public UndoableStringBuilder reverse()
	{
		this.st.push(this.s.toString());
		this.s.reverse();
		return new UndoableStringBuilder(this.s, this.st);
	}

	/**
	 * Undo the current string to the previous string that got poped out of the stack
	 * @return a new UndoableStringBuilder generated by the updated string and stack
	 * @exception EmptyStackException if stack is empty
	 */
	public UndoableStringBuilder undo()
	{
		try
		{
			this.s = this.s.replace(0 , this.s.length(), this.st.pop());
		}
		catch (Exception e)
		{
			System.out.println("[UNDO-FUNCTION ERROR]: You can't undo the original form of the Object");
		}
		return new UndoableStringBuilder(this.s, this.st);
	}

	/**
	 * returns a string that describes the object
	 */
	public String toString()
	{
		return this.s.toString();
	}

}